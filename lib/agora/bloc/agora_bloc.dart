import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:p_logger/p_logger.dart';
import 'package:permission_handler/permission_handler.dart';

import '../../common/env/env.dart';

part 'agora_event.dart';
part 'agora_state.dart';

class AgoraBloc extends Bloc<AgoraEvent, AgoraState> {
  AgoraBloc() : super(AgoraInitial()) {
    on<AgoraRequestPermissions>(_onRequestPermissions);
    on<AgoraInitializeEngine>(_onInitializeEngine);
    on<AgoraJoinChannel>(_onJoinChannel);
    on<AgoraLeaveChannel>(_onLeaveChannel);
  }

  late RtcEngine _engine; // The RtcEngine instances
  int? _remoteUid; // The UID of the remote user
  bool _localUserJoined =
      false; // Indicates whether the local user has joined the channel

  void _onRequestPermissions(
    AgoraRequestPermissions event,
    Emitter<AgoraState> emit,
  ) async {
    emit(AgoraLoading());
    await [Permission.microphone, Permission.camera].request();
  }

  void _onInitializeEngine(
    AgoraInitializeEngine event,
    Emitter<AgoraState> emit,
  ) async {
    // Create RtcEngine instance
    _engine = createAgoraRtcEngine();
    // Initialize RtcEngine and set the channel profile to live broadcasting
    await _engine.initialize(RtcEngineContext(
      appId: Env.agoraAppId,
      channelProfile: ChannelProfileType.channelProfileCommunication,
    ));

    // Add an event handler
    _engine.registerEventHandler(
      RtcEngineEventHandler(
        // Occurs when the local user joins the channel successfully
        onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
          logger.i('local user ${connection.localUid} joined');
          _localUserJoined = true;
        },
        // Occurs when a remote user join the channel
        onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
          logger.i("remote user $remoteUid joined");
          _remoteUid = remoteUid;
        },
        // Occurs when a remote user leaves the channel
        onUserOffline: (RtcConnection connection, int remoteUid,
            UserOfflineReasonType reason) {
          logger.i("remote user $remoteUid left channel");
          _remoteUid = null;
        },
      ),
    );
  }

  void _onJoinChannel(
    AgoraJoinChannel event,
    Emitter<AgoraState> emit,
  ) async {
    // Enable the video module
    await _engine.enableVideo();
    // Enable local video preview
    await _engine.startPreview();
    // Join a channel using a temporary token and channel name
    await _engine.joinChannel(
      token: "Env.agoraToken",
      channelId: "tamer",
      options: const ChannelMediaOptions(
          // Automatically subscribe to all video streams
          autoSubscribeVideo: true,
          // Automatically subscribe to all audio streams
          autoSubscribeAudio: true,
          // Publish camera video
          publishCameraTrack: true,
          // Publish microphone audio
          publishMicrophoneTrack: true,
          // Set` user role to clientRoleBroadcaster (broadcaster) or clientRoleAudience (audience)
          clientRoleType: ClientRoleType.clientRoleBroadcaster),
      uid:
          0, // When you set uid to 0, a user name is randomly generated by the engine
    );
    emit(AgoraLoaded(
      engine: _engine,
      remoteUid: _remoteUid,
      localUserJoined: _localUserJoined,
    ));
  }

  void _onLeaveChannel(
    AgoraLeaveChannel event,
    Emitter<AgoraState> emit,
  ) async {
    await _engine.leaveChannel();
    // Release resources
    await _engine.release();
    emit(AgoraInitial());
  }

  @override
  Future<void> close() async {
    await _engine.leaveChannel();
    // Release resources
    await _engine.release();
    return super.close();
  }
}
